
/*
 *  Author: TendTo
 *  Model Name: MTProto v2.0 - Secret Chat
 *  Status: WORKING
 */

theory MTProto_Secret_Chat
begin

builtins: hashing, symmetric-encryption, diffie-hellman

/**
 * I:
 * - genera <id>, <a>
 * - calcola <ga> = g^a mod p
 * - invia <id, R, ga>
 * SEMPLIFICAZIONE: i parametri g, p sono pubblici
 */
rule I_1:
    let 
        ga = 'g'^~a
        m1 = <~id, $R, ga>
    in
    [ Fr(~a), Fr(~id) ]
    --[ I_SendStart($I, $R, ~a) ]->
    [ Out(m1), St_I_1($I, $R, ~id, ~a) ]

/**
 * R:
 * - riceve <id, R, ga>
 * - genera <m>, <b>
 * - calcola <gb> = g^b mod p, <kir> = ga^b mod p, <h_kir> = h(kir)
 * - invia <id, gb, h_kir>, <{R, I, m}kir>
 */
rule R_1:
    let 
        gb = 'g'^~b
        kir = ga^~b
        m1 = <id, I, R, ga>
        m2 = <id, gb, h(kir)>
        mes = senc{R, I, ~m}kir
    in
    [ Fr(~m),  Fr(~b), In(m1) ]
    --[ R_RecieveStart(I, R, ga), R_SendKir(I, R, kir), R_SendMes(mes) ]->
    [ !R_CanAppCheck(I, R, kir), Out(m2), Out(mes) ]

/**
 * I:
 * - riceve <id, gb, h_kir>
 * - calcola <kir> = gb^a mod p
 * - invia <{R, I, m}kir>
 */
rule I_2:
    let 
        kir = gb^~a
        m2 = <~id, I, R, gb, h(kir)>
        mes = senc{I, R, ~m}kir
    in
    [ Fr(~m), St_I_1(I, R, ~id, ~a), In(m2) ]
    --[ I_RecieveKir(I, R, kir), I_SendMes(mes) ]->
    [ !I_CanAppCheck(I, R, kir), Out(mes) ]

/**
 * I controlla, tramite app, che la chiave kir sia la
 * stessa che vede R
 */
rule I_3:
    [ !I_CanAppCheck(I, R, kir), !R_CanAppCheck(I, R, kir) ]
    --[ I_AppCheck(I, R, kir) ]->
    [ I_AppCheck(I, R, kir) ]

/**
 * R controlla, tramite app, che la chiave kir sia la
 * stessa che vede I
 */
rule R_2:
    [ !I_CanAppCheck(I, R, kir), !R_CanAppCheck(I, R, kir) ]
    --[ R_AppCheck(I, R, kir) ]->
    [ R_AppCheck(I, R, kir) ]

/**
 * I accetta il messaggio senza aver effettuato il controllo tramite app
 */
rule I_4_no_check:
    [ !I_CanAppCheck(I, R, kir), In(senc{R, I, $m}kir) ]
    --[ I_AcceptMessageNoCheck(I, R, $m) ]->
    [  ]

/**
 * I accetta il messaggio dopo aver effettuato il controllo tramite app
 */
rule I_4_check:
    [ I_AppCheck(I, R, kir), In(senc{R, I, $m}kir) ]
    --[ I_AcceptMessageAfterCheck(I, R, $m) ]->
    [  ]

/**
 * R accetta il messaggio senza aver effettuato il controllo tramite app
 */
rule R_4_no_check:
    [ !R_CanAppCheck(I, R, kir), In(senc{I, R, $m}kir) ]
    --[ R_AcceptMessageNoCheck(I, R, $m) ]->
    [  ]

/**
 * R accetta il messaggio dopo aver effettuato il controllo tramite app
 */
rule R_4_check:
    [ R_AppCheck(I, R, kir), In(senc{I, R, $m}kir) ]
    --[ R_AcceptMessageAfterCheck(I, R, $m) ]->
    [  ]

/************************
 * AUTHENTICATION
 ************************/
/**
 * Se entrambi gli utenti hanno confermato tramite l'applicazione di 
 * vedere la stessa chiave, allora il primo ha effettivamente ricevuto un messaggio dal secondo.
 */
lemma auth_r:
    "
    All I R m #i .
        // Se I riceve e accetta un messaggio dopo aver fatto la verifica via app...
        I_AcceptMessageAfterCheck(I, R, m) @ i
        ==>
        ( Ex #j . 
            // ... il messaggio è stato inviato da R...
            R_SendMes(m) @ j
        )
        & // ... e nessun altro conosce il contenuto di m
        not ( Ex #k . 
                K(m) @ k 
            ) 
    "

/**
 * Se entrambi gli utenti hanno confermato tramite l'applicazione di 
 * vedere la stessa chiave, allora il secondo ha effettivamente ricevuto un messaggio dal primo.
 */
lemma auth_i:
    "
    All I R m #i .
        // Se R riceve e accetta un messaggio dopo aver fatto la verifica via app...
        R_AcceptMessageAfterCheck(I, R, m) @ i
        ==>
        ( Ex #j . 
            // ... il messaggio è stato inviato da I...
            I_SendMes(m) @ j
        )
        & // ... e nessun altro conosce il contenuto di m
        not ( Ex #k . 
                K(m) @ k 
            ) 
    "

/************************
 * SECRECY
 ************************/
/**
 * Se entrambi gli utenti hanno confermato tramite l'applicazione di 
 * vedere la stessa chiave, allora questa è nota solo a loro.
 */
lemma secret_kir:
    "
    All I R kir #i #j .
        // Se entrambi gli agenti hanno effettuato la verifica via app...
        (   I_AppCheck(I, R, kir) @ i
            &
            R_AppCheck(I, R, kir) @ j
        )
        ==>
        // ... nessun altro conosce kir
        not ( Ex #k . 
                K(kir) @ k 
            )
    "

/**
 * Se entrambi gli utenti hanno confermato tramite l'applicazione di 
 * vedere la stessa chiave, l'avversario non è in grado di decifrare messaggi.
 */
lemma secret_m:
    "
    All I R m #i .
        // Se I riceve e accetta un messaggio dopo aver fatto la verifica via app...
        I_AcceptMessageAfterCheck(I, R, m) @ i
        ==>
        // ... nessun altro conosce il contenuto di m
        not ( Ex #k . 
                K(m) @ k 
            )
    "

/**
 * Se gli utenti non hanno confermato tramite l'applicazione di 
 * vedere la stessa chiave, un attaccante potrebbe aver impersonato uno degli agenti.
 * RISULTATO ATTESO : FALSO
 */
lemma secret_m_no_check:
    "
    All I R m #i .
        // Se I riceve e accetta un messaggio senza aver fatto la verifica via app...
        I_AcceptMessageNoCheck(I, R, m) @ i
        ==>
        // ... nessun altro conosce il contenuto di m
        not ( Ex #k.
                 K(m) @ k 
            )
    "

/************************
 * SANITY CHECK
 ************************/

/**
 * R può ricevere il messaggio che inizia il protocollo
 */
lemma r_can_recieve_star [use_induction]:
    exists-trace
    "
    Ex I R ga #i .
        R_RecieveStart(I, R, ga) @ i
    "

/**
 * I può verificare se la chiave privata è condivisa con R
 * utilizzando l'applicazione di Telegram
 */
lemma i_can_check [use_induction]:
    exists-trace
    "
    Ex I R kir #i .
        I_AppCheck(I, R, kir) @ i
    "

end